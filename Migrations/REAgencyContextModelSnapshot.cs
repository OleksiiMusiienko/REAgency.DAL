// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REAgency.DAL.EF;

#nullable disable

namespace REAgency.DAL.Migrations
{
    [DbContext(typeof(REAgencyContext))]
    partial class REAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("REAgency.DAL.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArticleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("pathImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.EstateObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<int>("countViews")
                        .HasColumnType("int");

                    b.Property<int>("currencyId")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("estateType")
                        .HasColumnType("int");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<int>("numberStreet")
                        .HasColumnType("int");

                    b.Property<int>("operationId")
                        .HasColumnType("int");

                    b.Property<string>("pathPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("unitAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("currencyId");

                    b.HasIndex("employeeId");

                    b.HasIndex("locationId");

                    b.HasIndex("operationId");

                    b.HasIndex("unitAreaId");

                    b.ToTable("EstateObjects");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.Property<double>("kitchenArea")
                        .HasColumnType("float");

                    b.Property<double>("livingArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.Property<double>("kitchenArea")
                        .HasColumnType("float");

                    b.Property<double>("livingArea")
                        .HasColumnType("float");

                    b.Property<double>("steadArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Premis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.Property<double>("livingArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Stead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cadastr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Use")
                        .HasColumnType("int");

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Steads");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("estateObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("estateObjectId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.ObjectsForOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstateObjectId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ObjectsForOrders");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idClient")
                        .HasColumnType("int");

                    b.Property<int>("orderClient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("employeeId")
                        .HasColumnType("int");

                    b.Property<int?>("operationId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<bool>("userStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("operationId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("adminStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dateReg")
                        .HasColumnType("datetime2");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<bool>("userStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("postId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Article", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Person.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.District", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Locations.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Locality", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Locations.District", "District")
                        .WithMany("Localities")
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Location", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("REAgency.DAL.Entities.Locations.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("REAgency.DAL.Entities.Locations.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId");

                    b.HasOne("REAgency.DAL.Entities.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Locality");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Region", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Locations.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.EstateObject", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Person.Client", "Client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REAgency.DAL.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REAgency.DAL.Entities.Person.Employee", "Employee")
                        .WithMany("EstateObjects")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REAgency.DAL.Entities.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REAgency.DAL.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("operationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REAgency.DAL.Entities.Area", "unitArea")
                        .WithMany()
                        .HasForeignKey("unitAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("Operation");

                    b.Navigation("unitArea");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Flat", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Garage", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.House", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Office", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Parking", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Premis", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Room", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Stead", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Object.Storage", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Object.EstateObject", "estateObject")
                        .WithMany()
                        .HasForeignKey("estateObjectId");

                    b.Navigation("estateObject");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.ObjectsForOrders", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Order", "Order")
                        .WithMany("objectsForOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Client", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Person.Employee", "Employee")
                        .WithMany("Clients")
                        .HasForeignKey("employeeId");

                    b.HasOne("REAgency.DAL.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("operationId");

                    b.Navigation("Employee");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Employee", b =>
                {
                    b.HasOne("REAgency.DAL.Entities.Person.Post", "Post")
                        .WithMany()
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.District", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Locations.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Order", b =>
                {
                    b.Navigation("objectsForOrders");
                });

            modelBuilder.Entity("REAgency.DAL.Entities.Person.Employee", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("EstateObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
